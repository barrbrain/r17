// Copyright 2012 Matthew Nourse and n plus 1 computing pty limited unless otherwise noted.
// Please see LICENSE file for details.
#ifndef NP1_STD_MULTIMAP
#define NP1_STD_MULTIMAP


#include <pair>

namespace std {

/// A placeholder for std::multimap while I either come up with a good implementation
/// or rewrite the code that uses it.  Would be better to have an implementation
/// that can support being stored on disk so we can cache the stored values.
template <typename K, typename V, typename LT>
class multimap {
public:
  typedef pair<K, V> value_type;

  typedef value_type *iterator;
  typedef const value_type *const_iterator;

public:
  explicit multimap(const LT &lt) { NP1_ASSERT(false, "Sorted mappings are not supported yet"); }
  multimap(const multimap &other) {}

  iterator insert(const value_type &v) { return 0; }
  const_iterator find(const K &k) const { return 0; }
  const_iterator lower_bound(const K &k) const { return 0; }
  const_iterator upper_bound(const K &k) const { return 0; }
  size_t size() const { return 0; }
  void swap(multimap &other) {}
  multimap &operator = (const multimap &other) { return *this; }

  iterator begin() { return 0; }
  iterator end() { return 0; }
  const_iterator begin() const { return 0; }
  const_iterator end() const { return 0; }

private:
};

} // namespaces.


#endif

