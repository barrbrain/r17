// Copyright 2012 Matthew Nourse and n plus 1 computing pty limited unless otherwise noted.
// Please see LICENSE file for details.
#ifndef NP1_STD_MAP_HPP
#define NP1_STD_MAP_HPP

#include <pair>

namespace std {

namespace detail {

struct default_lt {
  template <typename T>
  bool operator()(const T &v1, const T &v2) { return v1 < v2; }
};

} // namespace detail


/// A placeholder for std::map while I either come up with a good implementation
/// or rewrite the code that uses it.  Would be better to have an implementation
/// that can support being stored on disk so we can cache the stored values.
template <typename K, typename V, typename LT = detail::default_lt>
class map {
public:
  typedef pair<K, V> value_type;

  typedef value_type *iterator;
  typedef const value_type *const_iterator;

public:
  map() { INF_ASSERT(false, "Sorted mappings are not supported yet"); }
  explicit map(const LT &lt) { INF_ASSERT(false, "Sorted mappings are not supported yet"); }
  map(const map &other) {}

  pair<iterator, bool> insert(const value_type &v) { iterator iter(0); return make_pair(iter, false); }
  const_iterator find(const K &k) const { return 0; }
  void swap(map &other) {}
  map &operator = (const map &other) { return *this; }

  iterator begin() { return 0; }
  iterator end() { return 0; }
  const_iterator begin() const { return 0; }
  const_iterator end() const { return 0; }

private:
};

} // namespaces.


#endif
